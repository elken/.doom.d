#+TITLE: Config
#+CAPTION: Banner
[[file:images/banner.png]]

(icon courtesy of https://github.com/eccentric-j/doom-icon)

Below is my [[https://github.com/hlissner/doom-emacs][doom-emacs]] config. Most of it isn't particularly original; snippets from stackoverflow, modernemacs and a large amount of the fancy macros from [[https://github.com/daviwil][David Wilson]]. Everything else will be commented to the best of /my/ ability.

* Table of Contents
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#setup][Setup]]
  - [[#exwm][EXWM]]
    - [[#desktopel][=desktop.el=]]
    - [[#gnome-flashback][GNOME-Flashback]]
    - [[#startsh--start-debugsh][=start.sh= / =start-debug.sh=]]
- [[#faq][FAQ]]
- [[#global-settings][Global settings]]
  - [[#better-defaults][Better defaults]]
  - [[#auth-info][Auth info]]
  - [[#modeline][Modeline]]
  - [[#magit][Magit]]
  - [[#eshell][EShell]]
  - [[#exwm][EXWM]]
  - [[#user-setup][User setup]]
- [[#keybindings][Keybindings]]
  - [[#dired][Dired]]
- [[#org-mode][Org Mode]]
  - [[#general-setup][General setup]]
  - [[#font-setup][Font setup]]
  - [[#firn-setup][Firn setup]]
- [[#languages][Languages]]
  - [[#rust][Rust]]
- [[#graphical-setup][Graphical setup]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line Numbers]]
  - [[#guiframe][GUI/Frame]]
  - [[#modeline][Modeline]]
- [[#packages][Packages]]
  - [[#packagesel][=packages.el=]]
  - [[#setup][Setup]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#org][Org]]
    - [[#visual-fill-column][Visual Fill Column]]
    - [[#org-make-toc][Org-make-toc]]
    - [[#org-tempo][Org-tempo]]
    - [[#edit-server][Edit Server]]
    - [[#graphql-mode][Graphql-mode]]
    - [[#spotify][Spotify]]
:END:

* Setup
If you (somehow) haven't already guessed, this depends on [[doom-repo:][Doom Emacs]], so also requires any dependency listed there. Outside of Doom, the only other dependency is =playerctl= for the now-playing modeline segment.

This is also focused around an exwm workflow (although as I use multiple systems the exwm stuff is nicely filtered out).

** EXWM
As mentioned above, the primary use for this config is =exwm= which is pulled from a number of files in the current environment.

*** =desktop.el=
The primary lisp file where the bulk of the configuration is held, with everything from my process manager to a now-playing segment. Below are some usage screenshots.

[[file:images/kill-process.png]]

[[file:images/tray.png]]

Transparency is handled both through [[*GUI/Frame][Doom]] and via [[file:exwm/picom.conf][picom]]

*** GNOME-Flashback
For the sake of simplicity, I use a slightly modified version of [[https://github.com/WJCFerguson/exwm-gnome-flashback][GNOME Flashback]] to run the startup scripts. It also gives me ootb access to things like =pinentry=, the various password stores, =gnome-screensaver= lock screen and the useful screenshot tool.

As such, everything is themed around [[https://nordtheme.com][Nord]].

*** =start.sh= / =start-debug.sh=
The scripts responsible for starting up exwm in the right way, including env variables and picom.
* FAQ
None yet because luckily nobody else has seen this spaghetti junction
* Global settings
** Better defaults
Make the scratch buffer start in lisp mode

#+begin_src emacs-lisp
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)
#+end_src
** Auth info
Add plaintext authinfo file to the list of sources. I /know/ I should use a GPG file but I'll get around to it damn it.

#+begin_src emacs-lisp
(add-to-list 'auth-sources "~/.authinfo")
#+end_src

** Modeline
Some niceties for the modeline (further config can be found in [[file:desktop.el][Desktop]])

#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t))
#+end_src

** Magit
Show gravatars where possible

#+begin_src emacs-lisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src

Allow forge to create repos under my name

#+begin_src emacs-lisp
(setq forge-owned-accounts '(("elken")))
#+end_src

** EShell
Eshell is a beautiful thing but ootb experience is a tad dated. Seems there is an issue with the magit section. I would also like to extend to add other sections later..

#+begin_src emacs-lisp
(require 'dash)
(require 's)

(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &rest PROPS)
  "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  `(setq ,NAME
         (lambda () (when ,FORM
                      (-> ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  "Accumulator for evaluating and concatenating esh-sections."
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  "Build `eshell-prompt-function'"
  (concat esh-header
          (-reduce-from 'esh-acc "" eshell-funcs)
          "\n"
          eshell-prompt-string))
#+end_src

Finally define the actual setup

#+begin_src emacs-lisp
(esh-section esh-dir
             ""  ;  (faicon folder)
             (abbreviate-file-name (eshell/pwd))
             '(:foreground "#EBCB8B" :bold ultra-bold :underline t))

(esh-section esh-git
             ""  ;  (git icon)
             (ignore-errors (magit-get-current-branch))
             '(:foreground "pink"))

;; Below I implement a "prompt number" section
(add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
(advice-add 'eshell-send-input :before
            (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             ""  ;  (list icon)
             (number-to-string esh-prompt-num)
             '(:foreground "brown"))

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-num))

;; Enable the new eshell prompt
(after! eshell
  (setq eshell-prompt-function 'esh-prompt-func
        esh-sep " | "
        esh-section-delim " "
        esh-header "\n┌─"
        eshell-prompt-regexp "└─> "
        eshell-prompt-string "└─> "
        esh-prompt-num 0))
#+end_src
** EXWM

Some config has to go here (so it's reloaded properly). Remove the posframe parent and ensure that it's properly centered in the workspace.

#+begin_src emacs-lisp
;; Make posframes work in exwm
;; https://github.com/ch11ng/exwm/issues/550
(after! (ivy-posframe exwm)
  :config
  (defun +ivy-posframe-display-exwm (str)
    (ivy-posframe--display str
                           (lambda (info)
                             (let* ((workarea (elt exwm-workspace--workareas exwm-workspace-current-index))
                                    (x (aref workarea 0))
                                    (y (aref workarea 1))

                                    (fw (aref workarea 2))
                                    (fh (aref workarea 3))

                                    (pw (plist-get info :posframe-width))
                                    (ph (plist-get info :posframe-height)))

                               (cons (+ x (/ (- fw pw) 2)) (+ y (/ (- fh ph) 2)))))))
  ;; force set frame-position on every posframe display
  (advice-add 'posframe--set-frame-position :before
              (lambda (&rest args)
                (setq-local posframe--last-posframe-pixel-position nil)))
  (setq ivy-posframe-display-functions-alist
        '((t . +ivy-posframe-display-exwm))

        ivy-posframe-parameters '((parent-frame nil)
                                  (z-group . above))))
#+end_src
** User setup
Use my name and emails for things like GPG, snippets, mail, magit, etc.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ellis Kenyo"
      user-mail-address "me@elken.dev")
#+END_SRC

Email folders and setup. This might move to a new section if I start to use email seriously.

#+begin_src emacs-lisp
(set-email-account! "mail.elken.dev"
                    '((mu4e-sent-folder       . "/mailbox/Sent Mail")
                      (mu4e-drafts-folder     . "/mailbox/Drafts")
                      (mu4e-trash-folder      . "/mailbox/Trash")
                      (mu4e-refile-folder     . "/mailbox/All Mail")
                      (smtpmail-smtp-user     . "me@elken.dev")
                      (user-mail-address      . "me@elken.dev")    ;; only needed for mu < 1.4
                      (mu4e-compose-signature . "---\nelken"))
                    t)
#+end_src

* Keybindings
It's not a custom config without some fancy keybinds

Swiper is /much/ better than isearch

#+begin_src emacs-lisp
(map! :after evil :gnvi "C-f" #'swiper)
#+end_src

Back to a simpler time...

#+begin_src emacs-lisp
(map! :g "C-s" #'save-buffer)
#+end_src

** Dired
Dired should behave better with evil mappings

#+begin_src emacs-lisp
(map! :map dired-mode-map
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-file)
#+end_src

* Org Mode
** General setup

Set the default org directories across all platforms. (I use [[https://mega.nz][Mega]] to sync everything as it's xplatform and even works fine on Android)

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC

Cycle by default (no idea why this isn't default)

#+begin_src emacs-lisp
(setq org-cycle-emulate-tab nil)
#+end_src

Default folding is very noisy, I /rarely/ need to see everything expanded

#+begin_src emacs-lisp
(setq org-startup-folded 'content)
#+end_src

Enable =org-indent-mode= by default to properly indent everything automagically, =variable-pitch-mode= to enable the more readable fonts where it makes sense and =visual-line-mode= to add a "current line" selection.

#+BEGIN_SRC emacs-lisp
(defun elken/org-mode-setup ()
  (org-make-toc-mode)
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))
#+END_SRC

Enable =visual-fill-column-mode= to center an org document for nicer editing.

#+BEGIN_SRC emacs-lisp
(defun elken/org-mode-visual-fill ()
  (setq visual-fill-column-width 200
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
#+END_SRC

Enables archiving of tasks. Replaces the in-built version which only works for single tasks.

#+BEGIN_SRC emacs-lisp
(defun elken/org-archive-done-tasks ()
  "Attempt to archive all done tasks in file"
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))

(map! :map org-mode-map :desc "Archive tasks marked DONE" "C-c DEL a" #'elken/org-archive-done-tasks)
#+END_SRC

Enables removal of killed tasks. I'm not /yet/ interested in tracking this long-term.

#+BEGIN_SRC emacs-lisp
(defun elken/org-remove-kill-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-cut-subtree)
     (pop kill-ring)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/KILL" 'file))

(map! :map org-mode-map :desc "Remove tasks marked as KILL" "C-c DEL k" #'elken/org-remove-kill-tasks)
#+END_SRC

Show images inline by default

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

Auto reload config on save (both =config.org= and =init.el=)

#+begin_src emacs-lisp
(require 'cl-extra)
(defvar elken/reload-files '("config.org" "init.el"))
(defvar elken/extra-org-files '())

(defun elken/doom-reload-on-save ()
  (cond
   ((cl-some (lambda (s)
               (string-equal
                (buffer-file-name)
                (expand-file-name s doom-private-dir)))
             elken/reload-files) (doom/reload))
   ((cl-some (lambda (s)
               (string-equal
                (buffer-file-name)
                (expand-file-name s doom-private-dir)))
             elken/extra-org-files) (let ((org-confirm-babel-evaluate nil))
             (org-babel-tangle)))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'elken/doom-reload-on-save)))
#+end_src

Make tangled shell files executable (I trust myself, ish...)

#+begin_src emacs-lisp
(defun elken/make-tangled-shell-executable ()
  "Ensure that tangled shell files are executable"
  (set-file-modes (buffer-file-name) #o755))

(add-hook 'org-babel-post-tangle-hook 'elken/make-tangled-shell-executable)
#+end_src

** Font setup
Font setup to prettify the fonts. Uses Montserrat in most places except where it makes sense to use the defined fixed width font.

#+BEGIN_SRC emacs-lisp
(defun elken/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Montserrat" :weight 'regular :height (cdr face)))


  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+END_SRC

** Firn setup
Useful settings and functions for [[github:theiceshell/firn][firn]]

#+begin_src emacs-lisp
(setq enable-dir-local-variables t)
(add-hook! 'before-save-hook 'time-stamp)
#+end_src

* Languages
Configuration for various programming languages.

** Rust
Make =rls= the default

#+begin_src emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rls))
#+end_src

* Graphical setup
** Fonts
Configure the fonts across all used platforms (slightly different names).

#+BEGIN_SRC emacs-lisp
(if IS-WINDOWS
    (setq doom-font (font-spec :family "Hasklug NF" :size 12)
          doom-variable-pitch-font (font-spec :family "Montserrat" :size 13))
  (setq doom-font (font-spec :family "Hasklug Nerd Font" :size 12)
        doom-variable-pitch-font (font-spec :family "Montserrat" :size 13)))
#+END_SRC

** Theme
Load my current flavour-of-the-month colour scheme.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-nord)
#+END_SRC

Change the default banner (need to add the ASCII banner at some point)

#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "images/banner.png" doom-private-dir))
#+END_SRC

** Line Numbers
Set the default line number format to be relative and disable line numbers for specific modes
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** GUI/Frame
Maximise emacs on startup

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Add some transparency

#+begin_src emacs-lisp
(after! exwm
  (set-frame-parameter (selected-frame) 'alpha 90)
  (add-to-list 'default-frame-alist '(alpha . 90)))
#+end_src

** Modeline
Define me a better modeline (for non-exwm)

#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar workspace-name modals matches buffer-info remote-host parrot selection-info)
    '(objed-state misc-info persp-name grip mu4e gnus github debug repl lsp minor-modes major-mode process vcs checker)))
#+end_src
* Packages

** =packages.el=
Tangle this into the packages.el file. Removes the need for it.

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! exwm)
(package! rainbow-mode)
(package! org-bullets)
(package! visual-fill-column)
(package! org-make-toc)
(package! edit-server)
(package! graphql-mode)
(package! desktop-environment)
;; (package! oauth2)
;; (package! simple-httpd)
;; (package! dotenv.el
;;   :recipe (:host github :repo "pkulev/dotenv.el"))
;; (package! spotify.el
;;   :recipe (:host github :repo "danielfm/spotify.el"))
#+END_SRC

** Setup

Configuration for any packages included above

*** Rainbow Mode

Colouring parentheses so I don't get confused by the scary lisp dialects.

#+BEGIN_SRC emacs-lisp
(use-package! rainbow-mode
    :hook
    (prog-mode . rainbow-mode)
    (text-mode . rainbow-mode))
#+END_SRC

*** Org

This is where the various org hooks are applied along with a few other settings

#+BEGIN_SRC emacs-lisp
    (use-package! org
    :hook (org-mode . elken/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"                                 ;; Change the dropdown icon
          org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "PROJ(p)" "STRT(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
            (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")) ;; Keywords
          org-agenda-start-with-log-mode t                  ;; Use log-mode for agenda
          org-archive-location "archive/Archive_%s::"           ;; Change archive location
          org-log-done 'time                                ;; Add timestamp to DONE items
          org-log-into-drawer t                             ;; Log items into drawer
          org-hide-emphasis-markers t)                      ;; Only show the last marker
    (elken/org-font-setup))
#+END_SRC

*** Visual Fill Column
Center the org mode documents

#+BEGIN_SRC emacs-lisp
(use-package! visual-fill-column
:hook (org-mode . elken/org-mode-visual-fill))
#+END_SRC

*** Org-make-toc
Used to create the table of contents

#+BEGIN_SRC emacs-lisp
(use-package! org-make-toc
  :after org)
#+END_SRC

*** Org-tempo
Better snippets for org-mode =src= blocks

#+BEGIN_SRC emacs-lisp
(use-package! org-tempo
  :after org
  :init
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+END_SRC

*** Edit Server
Used for editing things from Firefox

#+begin_src emacs-lisp
(use-package! edit-server
  :commands edit-server-start
  :init (if after-init-time
            (edit-server-start)
          (add-hook 'after-init-hook
                    #'(lambda() (edit-server-start))))
  :config (if IS-WINDOWS
              (setq edit-server-new-frame-alist
                    '((name . "Edit with Emacs FRAME")
                      (top . 200)
                      (left . 200)
                      (width . 80)
                      (height . 25)
                      (minibuffer . t)
                      (menu-bar-lines . t)
                      (window-system . w32)))
            (setq edit-server-new-frame-alist
                  '((name . "Edit with Emacs FRAME")
                    (top . 200)
                    (left . 200)
                    (width . 80)
                    (height . 25)
                    (minibuffer . t)
                    (menu-bar-lines . t)
                    (window-system . x)))))
#+end_src

*** Graphql-mode
Used for displaying graphql queries nicely & sending.

#+begin_src emacs-lisp
(use-package! graphql-mode)
#+end_src

*** Spotify
/Possible/ configuration for spotify, however seems to be a few bugs floating so not usable yet.

#+begin_src emacs-lisp
;;(use-package! dotenv)
;;(use-package! spotify
;;  :config
;;  (let ((id (dotenv-get "CLIENT_ID" ".env"))
;;        (secret (dotenv-get "CLIENT_SECRET" ".env")))
;;    (setq spotify-oauth2-client-id id
;;          spotify-oauth2-client-secret secret
;;          spotify-transport 'connect
;;          spotify-status-location 'modeline))
;;  (global-spotify-remote-mode))
#+end_src
