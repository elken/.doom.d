#+TITLE: EXWM Configuration

* Window Management
Configuration related to managing windows in Emacs. I need to comment this better but for now it'll do.

** EXWM
*** Main config
This is what all the cool kids are doing these days. Look ma, no DE!

#+begin_src emacs-lisp :tangle ./desktop.el

;; Make the launcher only show app names
(use-package! counsel
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only))

(defun elken/exwm-update-class ()
  "Update the buffer to be the name of the window"
  (exwm-workspace-rename-buffer exwm-class-name))

(defun elken/exwm-update-title ()
  "Update the window title when needed"
  (pcase exwm-class-name
    ("firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

(defun elken/configure-window-by-class()
  "Configuration for windows (grouped by WM_CLASS)"
  (interactive)
  (pcase exwm-class-name
    ("mpv" (exwm-floating-toggle-floating)
     (exwm-layout-toggle-mode-line))
    ("discord" (exwm-workspace-move-window 3))
    ("Spotify" (exwm-workspace-move-window 4))
    ("firefox" (exwm-workspace-move-window 2))))

(defun elken/run-application (command)
  "Run the specified command as a daemon"
  (call-process "gtk-launch" nil 0 nil command))

(defun elken/run-in-background (command)
  "Run the specified command as a daemon"
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun elken/set-wallpaper (file)
  "Set the DE wallpaper to be $FILE"
  (interactive)
  (start-process-shell-command "feh" nil (format "feh --bg-scale %s" file)))

(defun elken/exwm-init-hook ()
  "Various init processes for exwm"
  ;; Default emacs behaviours
  (exwm-workspace-switch-create 1)
  (eshell)

  ;; Daemon applications
  (elken/run-in-background "pasystray")
  (elken/run-in-background "megasync")
  (elken/run-in-background "nm-applet")

  ;; Startup applications
  (elken/run-application "firefox")
  (elken/run-application "discord")
  (elken/run-application "spotify"))

(use-package! desktop-environment
  :after exwm
  :config
  (desktop-environment-mode))

(use-package! exwm
  :config
  ;; Show all buffers for switching
  (setq exwm-workspace-show-all-buffers t)

  ;; Set a sane number of default workspaces
  (setq exwm-workspace-number 10)

  ;; Define workspace setup for monitors
  (setq exwm-randr-workspace-monitor-plist '(2 "DP-0" 3 "DP-0"))

  ;; Mouse follow me
  (setq exwm-workspace-warp-cursor t)

  ;; Focus follow mouse
  (setq mouse-autoselect-window t
        focus-follows-mouse t)

  ;; Set the buffer to the name of the window class
  (add-hook 'exwm-update-class-hook #'elken/exwm-update-class)

  ;; Init hook
  (add-hook 'exwm-init-hook #'elken/exwm-init-hook)

  ;; Update window title
  (add-hook 'exwm-update-title-hook #'elken/exwm-update-title)

  ;; Configure windows as created
  (add-hook 'exwm-manage-finish-hook #'elken/configure-window-by-class)

  ;; /Always/ pass these to emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j
          ?\C-\ ))

  ;; Shortcut to passthrough next keys
  (map! :map exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Setup screen layout
  (require 'exwm-randr)
  (exwm-randr-enable)
  (start-process-shell-command "xrandr" nil "sh ~/.screenlayouts/default.sh")

  ;; Set the wallpaper
  (elken/set-wallpaper "~/Pictures/FFVIIR_Midgar.png")

  ;; Setup tray
  (require 'exwm-systemtray)
  (setq exwm-systemtray-height 16)
  (exwm-systemtray-enable)

  (setq exwm-input-global-keys
        '(
          ([?\s- ] . counsel-linux-app)
          ([?\s-r] . exwm-reset)
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ([?\s-&] . (lambda (command) (interactive (list (read-shell-command "> ")))
                       (start-process-shell-command command nil command)))

          ([?\s-w] . exwm-workspace-switch)

          ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
          ([?\s-`] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 0)))
          ([?\s-1] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 1)))
          ([?\s-2] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 2)))
          ([?\s-3] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 3)))
          ([?\s-4] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 4)))
          ([?\s-5] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 5)))
          ([?\s-6] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 6)))
          ([?\s-7] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 7)))
          ([?\s-8] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 8)))
          ([?\s-9] . (lambda ()
                       (interactive)
                       (exwm-workspace-switch-create 9)))))
  (exwm-enable))
#+end_src

*** Other config files
**** Startup
Main script used to run exwm

#+begin_src shell :tangle ./exwm/start.sh
#!/usr/bin/env bash

exec >~/.logs/xsession 2>&1
export LANG="en_GB.UTF-8"
export LANGUAGE="en_GB.UTF-8"
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
xset -dpms
xset s off
xss-lock -- slock &
picom -b --experimental-backends --dbus --config ~/.doom.d/exwm/picom.conf
emacs -mm -l ~/.doom.d/desktop.el --use-exwm
#+end_src

**** Debug
Script used to debug any startup changes that ~will~ may occur.

#+begin_src shell :tangle ./exwm/start-debug.sh
#!/usr/bin/env bash

exec >~/.logs/xsession 2>&1
export LANG="en_GB.UTF-8"
export LANGUAGE="en_GB.UTF-8"
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
xset -dpms
xset s off
picom -b --experimental-backends --dbus --config ~/.doom.d/exwm/picom.conf
emacs -mm --debug-init -l ~/.doom.d/desktop.el --use-exwm
#+end_src

**** Picom config
Config for picom. Gives nice transparency on most windows that request it.

#+begin_src conf :tangle ./exwm/picom.conf
#            ▀                                                       ▄▀▀
#   ▄▄▄▄   ▄▄▄     ▄▄▄    ▄▄▄   ▄▄▄▄▄          ▄▄▄    ▄▄▄   ▄ ▄▄   ▄▄█▄▄
#   █▀ ▀█    █    █▀  ▀  █▀ ▀█  █ █ █         █▀  ▀  █▀ ▀█  █▀  █    █
#   █   █    █    █      █   █  █ █ █         █      █   █  █   █    █
#   ██▄█▀  ▄▄█▄▄  ▀█▄▄▀  ▀█▄█▀  █ █ █    █    ▀█▄▄▀  ▀█▄█▀  █   █    █
#   █
#   ▀




# Shadow

shadow = true;
shadow-radius = 12;
shadow-offset-x = -12;
shadow-offset-y = -12;
shadow-opacity = 0.7;

# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# shadow-exclude-reg = "x10+0+0";
xinerama-shadow-crop = true;

shadow-exclude = [
	"name = 'Notification'",
	"class_g = 'Conky'",
	"class_g ?= 'Notify-osd'",
	"class_g = 'Cairo-clock'",
	"class_g = 'slop'",
	"class_g = 'Firefox' && argb",
	"class_g = 'Rofi'",
	"_GTK_FRAME_EXTENTS@:c",
	"_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

# Logs
log-level = "ERROR";
log-file = "~/.cache/picom-log.log";


# Opacity

# inactive-opacity = 0.8;
# active-opacity = 0.8;
# frame-opacity = 0.7;
inactive-opacity-override = false;

opacity-rule = [
	"80:class_g = 'URxvt'",
	"80:class_g = 'UXTerm'",
	"80:class_g = 'XTerm'"
];

# inactive-dim = 0.2;
# inactive-dim-fixed = true;

# Blur

blur: {
	method = "dual_kawase";
    strength = 2.0;
	# deviation = 1.0;
	# kernel = "11x11gaussian";
}

# blur-background = true;
blur-background-frame = true;
# blur-kern = "3x3box";
# blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
# blur-background-fixed = true;

blur-background-exclude = [
	"window_type = 'desktop'",
	"window_type = 'utility'",
	"window_type = 'notification'",
	"class_g = 'slop'",
	"class_g = 'Firefox' && argb",
	"name = 'rofi - Search'",
	"_GTK_FRAME_EXTENTS@:c"
];

# max-brightness = 0.66

# Fading

fading = true;
fade-delta = 3;
fade-in-step = 0.03;
fade-out-step = 0.03;
# no-fading-openclose = true;
# no-fading-destroyed-argb = true;
fade-exclude = [ ];

# Other

backend = "glx";
mark-wmwin-focused = true;
mark-ovredir-focused = true;
# use-ewmh-active-win = true;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 144;
vsync = true;
# sw-opti = true;
unredir-if-possible = false;
# unredir-if-possible-delay = 5000;
# unredir-if-possible-exclude = [ ];
# focus-exclude = [ "class_g = 'Cairo-clock'" ];

focus-exclude = [
	"class_g = 'Cairo-clock'",
	"class_g ?= 'rofi'",
	"class_g ?= 'slop'",
	"class_g ?= 'Steam'"
];


detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];
# resize-damage = 1;

# GLX backend

glx-no-stencil = true;
# glx-no-rebind-pixmap = true;
# xrender-sync-fence = true;
use-damage = true;

# Window type settings

wintypes:
{
	tooltip = { fade = true; shadow = true; focus = false;	};
	normal = { shadow = false; };
	dnd = { shadow = false; };
	popup_menu = { shadow = true; focus = false; opacity = 0.90; };
	dropdown_menu = { shadow = true; focus = false; };
	above = { shadow = true; };
	splash = { shadow = false; };
	utility = { focus = false; shadow = false; };
	notification = { shadow = false; };
	desktop = { shadow = false };
	menu = { focus = false };
	dialog = { shadow = true; };
};
#+end_src

